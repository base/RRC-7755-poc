// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/base-org/RRC-7755-poc/internal/prover/storage_prover (interfaces: EthRPCClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEthRPCClient is a mock of EthRPCClient interface.
type MockEthRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthRPCClientMockRecorder
}

// MockEthRPCClientMockRecorder is the mock recorder for MockEthRPCClient.
type MockEthRPCClientMockRecorder struct {
	mock *MockEthRPCClient
}

// NewMockEthRPCClient creates a new mock instance.
func NewMockEthRPCClient(ctrl *gomock.Controller) *MockEthRPCClient {
	mock := &MockEthRPCClient{ctrl: ctrl}
	mock.recorder = &MockEthRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthRPCClient) EXPECT() *MockEthRPCClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockEthRPCClient) Call(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockEthRPCClientMockRecorder) Call(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockEthRPCClient)(nil).Call), varargs...)
}
